---
- name: Get kernel version
  command: uname -r
  register: kernel_version

- name: Get ubuntu release name
  command: lsb_release -c -s
  register: ubuntu_release_name

- name: Add GPG keys
  apt_key: url={{item}} state=present
  become: true
  with_items:
    - https://download.docker.com/linux/ubuntu/gpg

- name: Add repositories
  apt_repository: state=present repo={{item}}
  become: true
  with_items:
    - deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable

- name: Update apt-cache
  apt: update_cache=yes
  become: true

- name: Install packages (pkg) via apt
  become: true
  apt:
    state: present 
    pkg:
      # vbox-guest-additions
      - build-essential
      - dkms
      - linux-headers-{{kernel_version.stdout}}
      # c++
      - g++
      - gcc
      - make
      - cmake
      # docker
      - docker-ce
      # git
      - git
      # mdns
      - avahi-daemon
      # pyenv
      - make 
      - build-essential 
      - libssl-dev 
      - zlib1g-dev 
      - libbz2-dev 
      - libreadline-dev 
      - libsqlite3-dev 
      - wget 
      - curl 
      - llvm 
      - libncurses5-dev 
      - xz-utils 
      - tk-dev 
      - libxml2-dev 
      - libxmlsec1-dev 
      - libffi-dev 
      - liblzma-dev
      # qemu
      - qemu-kvm 
      - libvirt-daemon-system 
      - libvirt-clients 
      - bridge-utils
      # vim
      - vim
      # zsh
      - zsh
      # user
      - xclip

- name: Install packages via snap
  become: true
  snap: name={{item.name}} classic={{item.classic | default(omit)}} state=present
  with_items:
    - {name: clion, classic: yes}
    - {name: pycharm-professional, classic: yes}
    - {name: goland, classic: yes}
    - {name: spotify, classic: yes}
    - {name: sublime-text, classic: yes}
    - {name: code, classic: yes}

- name: Set user "{{ansible_user_id}}" shell to zsh
  user: name={{ansible_user_id}} state=present shell=/usr/bin/zsh
  become: true

- name: Add user "{{ansible_user_id}}" to sudoers
  become: true
  lineinfile:
    path: /etc/sudoers.d/{{ansible_user_id}}
    line: '{{ansible_user_id}} ALL=(ALL) NOPASSWD: ALL'
    state: present
    mode: 0440
    create: yes
    validate: 'visudo -cf %s'

- name: Create folders and files
  file: path={{item.path}} state={{item.state}} mode={{item.mode | default(omit)}} owner={{item.owner | default(omit)}} group={{item.group | default(omit)}} 
  become: true
  become_user: "{{item.owner | default(omit)}}"
  with_items:
    - {path: /opt/nodenv, state: directory, mode: '777'}
    - {path: /opt/pyenv, state: directory, mode: '777'}
    - {path: /opt/goenv, state: directory, mode: '777'}
    - {path: /opt/unity, state: directory, mode: '777'}
    - {path: /opt/appimaged, state: directory, mode: '777'}
    - {path: "/home/{{ansible_user_id}}/.oh-my-zsh", owner: "{{ansible_user_id}}", state: directory}
    - {path: "/home/{{ansible_user_id}}/.zshrc", owner: "{{ansible_user_id}}", state: touch}
    - {path: "/home/{{ansible_user_id}}/source", owner: "{{ansible_user_id}}", state: directory}

- name: Download files
  get_url: url={{item.url}} dest={{item.path}} mode={{item.mode | default(omit)}}
  become: true
  become_user: "{{item.owner | default(omit)}}"
  with_items:
    - {url: "https://public-cdn.cloud.unity3d.com/hub/prod/UnityHub.AppImage", mode: '755', path: /opt/unity/UnityHub.AppImage}
    - {url: "https://github.com/AppImage/appimaged/releases/download/continuous/appimaged-x86_64.AppImage", path: /opt/appimaged/appimaged.AppImage, mode: '755'}
    - {url: "https://storage.googleapis.com/kubernetes-release/release/v1.18.0/bin/linux/amd64/kubectl", path: /usr/local/bin/kubectl, mode: '755'}
    - {url: "https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64", path: /usr/local/bin/minikube, mode: '755'}
  
- name: Clone repositories
  git: repo={{item.url}} dest={{item.path}}
  become: true
  become_user: "{{item.owner | default(omit)}}"
  with_items:
    - {url: "https://github.com/syndbg/goenv.git", path: /opt/goenv}
    - {url: "https://github.com/nodenv/nodenv.git", path: /opt/nodenv}
    - {url: "https://github.com/nodenv/node-build.git", path: /opt/nodenv/plugins/node-build}
    - {url: "https://github.com/pyenv/pyenv.git", path: /opt/pyenv}
    - {url: "https://github.com/pyenv/pyenv-virtualenv", path: /opt/pyenv/plugins/pyenv-virtualenv}
    - {url: "https://github.com/ohmyzsh/ohmyzsh.git", path: "/home/{{ansible_user_id}}/.oh-my-zsh", owner: "{{ansible_user_id}}"}

- name: Copy local files
  copy: src={{item.src}} dest={{item.dest}} owner={{item.owner | default(omit)}} group={{item.group | default(omit)}} mode={{item.mode | default(omit)}}
  become: true
  become_user: "{{item.owner | default(omit)}}"
  with_items:
    - {src: file.zsh-theme.ben, dest: "/home/{{ansible_user_id}}/.oh-my-zsh/themes/ben.zsh-theme", owner: '{{ansible_user_id}}'}


- name: Add blocks to existing files
  become: true
  blockinfile:
    path: "{{item.dest}}"
    marker: "# {mark} {{item.src}}"
    block: "{{ lookup('file', '../files/{{item.src}}') }}"
  with_items:
    - {src: block.zshrc.pyenv, dest: "/home/{{ansible_user_id}}/.zshrc"}
    - {src: block.zshrc.nodenv, dest: "/home/{{ansible_user_id}}/.zshrc"}
    - {src: block.zshrc.goenv, dest: "/home/{{ansible_user_id}}/.zshrc"}
    - {src: block.zshrc.ohmyzsh, dest: "/home/{{ansible_user_id}}/.zshrc"}
    - {src: block.zshrc.aliases, dest: "/home/{{ansible_user_id}}/.zshrc"}


- name: Start services
  systemd: name={{item}} state=started enabled=yes
  with_items:
    - docker
    - avahi-daemon
  
- name: Install appimaged
  command: "/opt/appimaged/appimaged.AppImage --install"
  ignore_errors: true
  